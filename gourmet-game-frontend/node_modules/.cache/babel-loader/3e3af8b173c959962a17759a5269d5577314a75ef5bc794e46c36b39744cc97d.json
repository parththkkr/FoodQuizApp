{"ast":null,"code":"import axios from 'axios';\nimport Notification from './components/Notification.vue';\nexport default {\n  name: 'App',\n  components: {\n    Notification\n  },\n  data() {\n    return {\n      question: {},\n      selectedAnswer: '',\n      notificationMessage: '',\n      notificationType: '',\n      timeLeft: 60 // 60 seconds\n    };\n  },\n  created() {\n    this.fetchQuestion();\n    this.startTimer();\n  },\n  methods: {\n    async fetchQuestion() {\n      try {\n        const response = await axios.get('http://localhost:3000/api/game/start');\n        this.question = response.data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async submitAnswer() {\n      // Clear the timer when submitting the answer\n      clearInterval(this.timerInterval);\n      try {\n        const response = await axios.post('http://localhost:3000/api/game/answer', {\n          id: this.question._id,\n          answer: this.selectedAnswer\n        });\n        const isCorrect = response.data.correct;\n        if (isCorrect) {\n          this.notificationMessage = 'Correct!';\n          this.notificationType = 'success';\n        } else {\n          this.notificationMessage = `Wrong! The correct answer is: ${response.data.correctAnswer}`;\n          this.notificationType = 'error';\n        }\n\n        // Clear the notification after 2 seconds\n        setTimeout(() => {\n          this.notificationMessage = '';\n          this.notificationType = '';\n        }, 2000);\n        this.fetchQuestion(); // Fetch new question\n        this.selectedAnswer = ''; // Clear selected answer\n        this.startTimer(); // Restart the timer for the next question\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    clearNotification() {\n      this.notificationMessage = '';\n      this.notificationType = '';\n    },\n    startTimer() {\n      this.timeLeft = 60; // Reset the timer to 60 seconds\n      this.timerInterval = setInterval(() => {\n        if (this.timeLeft > 0) {\n          this.timeLeft--;\n        } else {\n          // Handle timeout here (e.g., show a message, fetch a new question)\n          clearInterval(this.timerInterval);\n          // You can add your timeout logic here\n        }\n      }, 1000); // Update the timer every second\n    },\n    formatTime(seconds) {\n      const minutes = Math.floor(seconds / 60);\n      const remainingSeconds = seconds % 60;\n      return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n    }\n  },\n  beforeUnmount() {\n    clearInterval(this.timerInterval); // Clear the timer when the component is destroyed\n  }\n};","map":{"version":3,"names":["axios","Notification","name","components","data","question","selectedAnswer","notificationMessage","notificationType","timeLeft","created","fetchQuestion","startTimer","methods","response","get","error","console","submitAnswer","clearInterval","timerInterval","post","id","_id","answer","isCorrect","correct","correctAnswer","setTimeout","clearNotification","setInterval","formatTime","seconds","minutes","Math","floor","remainingSeconds","beforeUnmount"],"sources":["/home/parth/Desktop/game_app/gourmet-game-frontend/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"game-container\">\n      <h2>{{ question.question }}</h2>\n      <img :src=\"question.image\" alt=\"Dish Image\" class=\"dish-image\">\n      <p>{{ question.description }}</p>\n      <div v-for=\"(answer, index) in question.answers\" :key=\"index\" class=\"answer-option\">\n        <input type=\"radio\" :id=\"answer\" v-model=\"selectedAnswer\" :value=\"answer\">\n        <label :for=\"answer\">{{ answer }}</label>\n      </div>\n      <button @click=\"submitAnswer\">Submit</button>\n      <div class=\"timer\">Time remaining: {{ formatTime(timeLeft) }}</div>\n    </div>\n    <Notification :message=\"notificationMessage\" :type=\"notificationType\" @clear=\"clearNotification\" />\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport Notification from './components/Notification.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    Notification\n  },\n  data() {\n    return {\n      question: {},\n      selectedAnswer: '',\n      notificationMessage: '',\n      notificationType: '',\n      timeLeft: 60 // 60 seconds\n    };\n  },\n  created() {\n    this.fetchQuestion();\n    this.startTimer();\n  },\n  methods: {\n    async fetchQuestion() {\n      try {\n        const response = await axios.get('http://localhost:3000/api/game/start');\n        this.question = response.data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async submitAnswer() {\n  // Clear the timer when submitting the answer\n  clearInterval(this.timerInterval);\n\n  try {\n    const response = await axios.post('http://localhost:3000/api/game/answer', {\n      id: this.question._id,\n      answer: this.selectedAnswer\n    });\n    const isCorrect = response.data.correct;\n    if (isCorrect) {\n      this.notificationMessage = 'Correct!';\n      this.notificationType = 'success';\n    } else {\n      this.notificationMessage = `Wrong! The correct answer is: ${response.data.correctAnswer}`;\n      this.notificationType = 'error';\n    }\n    \n    // Clear the notification after 2 seconds\n    setTimeout(() => {\n      this.notificationMessage = '';\n      this.notificationType = '';\n    }, 2000);\n\n    this.fetchQuestion(); // Fetch new question\n    this.selectedAnswer = ''; // Clear selected answer\n    this.startTimer(); // Restart the timer for the next question\n  } catch (error) {\n    console.error(error);\n  }\n}\n,\n    clearNotification() {\n      this.notificationMessage = '';\n      this.notificationType = '';\n    },\n    startTimer() {\n      this.timeLeft = 60; // Reset the timer to 60 seconds\n      this.timerInterval = setInterval(() => {\n        if (this.timeLeft > 0) {\n          this.timeLeft--;\n        } else {\n          // Handle timeout here (e.g., show a message, fetch a new question)\n          clearInterval(this.timerInterval);\n          // You can add your timeout logic here\n        }\n      }, 1000); // Update the timer every second\n    },\n    formatTime(seconds) {\n      const minutes = Math.floor(seconds / 60);\n      const remainingSeconds = seconds % 60;\n      return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n    }\n  },\n  beforeUnmount() {\n    clearInterval(this.timerInterval); // Clear the timer when the component is destroyed\n  }\n};\n</script>\n\n<style scoped>\n.game-container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.dish-image {\n  height: 150px;\n  width: 150px;\n  margin-bottom: 10px;\n}\n\n.answer-option {\n  margin-bottom: 10px;\n}\n\nbutton {\n  display: block;\n  margin: 20px auto;\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.timer {\n  margin-top: 20px;\n}\n\n@media (max-width: 600px) {\n  .game-container {\n    padding: 10px;\n  }\n\n  button {\n    font-size: 14px;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}